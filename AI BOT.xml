import websocket
import json
import time

# Replace with your Deriv API token
API_TOKEN = 'YOUR_API_TOKEN'

# Define the WebSocket URL for Deriv
WS_URL = "wss://ws.binaryws.com/websockets/v3?app_id=YOUR_APP_ID"

# Define your stake and target digit
stake = 1  # Adjust the stake as needed
target_digit = 9

# Function to handle incoming messages
def on_message(ws, message):
    data = json.loads(message)
    # Check if the message contains the necessary information
    if 'tick' in data:
        current_digit = int(data['tick']['quote']) % 10  # Get the last digit
        print(f"Current digit: {current_digit}")

        # Trading logic
        if current_digit < target_digit:
            # Execute a trade for digit 9
            execute_trade(target_digit, stake)

def execute_trade(digit, stake):
    print(f"Executing trade for digit {digit} with stake {stake}")
    # Here you would call the Deriv API to place your trade
    # For example:
    # ws.send(json.dumps({
    #     "buy": 1,  # Replace with the actual API call parameters
    #     "amount": stake,
    #     "symbol": "R_100",  # Example symbol
    #     "contract_type": "DIGITMATCH",  # Adjust as needed
    #     "duration": 1,  # Duration of the trade
    #     "duration_unit": "m",  # Duration unit
    #     "barrier": digit,  # The digit to match
    #     "currency": "USD"  # Currency
    # }))

# Function to handle errors
def on_error(ws, error):
    print(f"Error: {error}")

# Function to handle the closing of the connection
def on_close(ws):
    print("Connection closed")

# Function to handle the opening of the connection
def on_open(ws):
    print("Connection opened")
    # Subscribe to the market data you are interested in
    ws.send(json.dumps({
        "ticks": "R_100",  # Replace with the desired market
        "subscribe": 1
    }))

if __name__ == "__main__":
    # Create a WebSocket client
    ws = websocket.WebSocketApp(WS_URL,
                                on_message=on_message,
                                on_error=on_error,
                                on_close=on_close)

    # Run the WebSocket client
    ws.on_open = on_open
    ws.run_forever()
